---
title: "Functions"
format: html
editor: visual
---

*You can edit this however you like. I just put the instructions on the page so I wouldn't have to toggle*

# Creating the Functions used on this Project

## Querying the Census API and returning a table

### Quoted string

Creating a function to call on specified variables from the Census API. Method: passing along variables to a paste statement based on the following specifications

-   Contains a year between 2010-2022

-   Return at lease 2 numeric variables: PUMS person weight (PWGTP) and at least 1 of the following

    -   Age (AGEP), Gas Cost (GASP), Gross rent as a percentage of household income (GRPIP), Time of arrival at work (JWAP), Time of departure from work (JWDP), Travel time to work (JWMNP)

-   Return at least 1 categorical variable

    -   (FER), (HHL), (HISPEED), (JWTRNS), (SCH), (SCHL), (SEX)

-   Optional argument to subset the data based on geography (All, Regions, Divisions, or States)

```{r}
query_api <- function(year, vars = c("PWGTP", "AGEP", "SEX"), geo = c("ALL"), i){
  # year = year of census to call
  # vars = vector of numeric variable names
  # geo = vector of geographic sub division. all = Regions, Divisions, and States
  # i is an optional index variable for after table is created
  
  # Dummy-proofing variables
  vars <- toupper(vars)
  geo <- toupper(geo)
  
  n_valid_vars <- c("PWGTP", "AGEP", "GASP", "GRPIP", "JWAP", "JWDP", "JWMNP")
  c_valid_vars <- c("FER", "HHL", "HISPEED", "JWTRNS", "SCH", "SCHL", "SEX")
  
  n_vars <- intersect(vars, n_valid_vars)
  c_vars <- intersect(vars, c_valid_vars)
    
  if (!is.numeric(year) | length(year) != 1){
    stop("Warning: Year must be a single numeric value")
  } else if(year > 2022 | year < 2010){
    stop("Warning: Year must be between 2010-2022")
  }
  
  if (length(n_vars) == 0 | length(c_vars) == 0){
    stop("Warning: One or more variables are invalid")
  } 

  if (length(n_vars) < 2 | !("PWGTP" %in% n_vars)){
    stop("Warning: PWGTP and at least 1 other valid numerical vector must be an argument")
  }
  
  if(!(geo %in% c("ALL", "REGIONS", "DIVISIONS", "STATES"))){
    stop("Warning: Invalid geography level")
  }
  
  if ("ALL" %in% geo){
    geo <- c("REGIONS", "DIVISIONS", "STATES")
  }
  
  n_str = paste(n_vars, collapse=",")
  c_str = paste(c_vars, collapse=",")
  g_str = paste(geo, collapse=",")
  all_mods = paste(n_str, c_str, g_str, sep=",")
  
  #https://api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR&SCHL=24
  custom_url <- paste0("https://api.census.gov/data/", as.character(year), "/acs/acs1/pums?get=", all_mods)
  
  
}
```
